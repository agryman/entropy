matrix(runif(20), ncol = 2)
v.sample <- matrix(runif(20), ncol = 2)
rowsum(v.sample)
v.sample * v.sample
v.sample^2
3^2
v.sample
?rowsum
sum(v.sample)
colSums(v.sample)
rowSums(v.sample)
plot(v.sample)
v.sample <- matrix(runif(2000000,-1,1), ncol = 2)
plot(v.sample)
v.sample <- matrix(runif(2000,-1,1), ncol = 2)
plot(v.sample)
r.squared <- rowSums(v.sample^2)
head(r.squared)
v.sample <- v.sample[r.squared > 0 & r.squared < 1, ]
plot(v.sample)
?arctan
theta <- atan2(v.sample[,1], v.sample[,2])
hist(theta)
hist(theta, breaks = seq(-pi,pi,length(30)))
range(theta)
-pi
?seq
seq(-pi,pi,length.out = 30)
hist(theta, breaks = seq(-pi,pi,length.out = 30))
hist(theta, breaks = seq(-pi,pi,length.out = 30), probability = TRUE)
?&
apropos(logical and'')
TRUE & FALSE
TRUE && FALSE
?runif
knitr::opts_chunk$set(echo = TRUE, fig.align = "center")
n <- 2
v <- matrix(runif(n * num.samples, -1, 1), ncol = n)
num.samples <- 10^6
n <- 2
v <- matrix(runif(n * num.samples, -1, 1), ncol = n)
r <- rowSums(v^2)
v <- v[0 < r & r <= 1,]
length(v)/num.samples
pi/4
length(v)
dim(v)
n <- 2
v <- matrix(runif(n * num.samples, -1, 1), ncol = n)
v.squared <- rowSums(v^2)
v <- v[0 < v.squared & v.squared < 1,]
length(v)/(n*num.samples)
pi/4
n <- 2
v <- matrix(runif(n * num.samples, -1, 1), ncol = n)
v.squared <- rowSums(v^2)
v <- v[0 < v.squared & v.squared < 1,]
length(v)/(n*num.samples)
pi/4
head(v)
vx.sample <- v[,1]/sqrt(v.squared)
rho <- function(theta) {}
rho <- function(theta) {rep(1/(2*pi), times = length(theta))}
rho(1)
rho(c(0,1,2))
?rnorm
?matrix
matrix(nrow=10,ncol=4)
d <- 2
v<-runif(d+1,-1,1)
v
d
v.squared <- v * v
v.squared
sum(v.squared)
norm.squared <- sum(v.squared)
norm.squared
knitr::opts_chunk$set(echo = TRUE, fig.align = "center")
rsphere <- function(n, d) {
u.sample <- matrix(nrow=n,ncol=(d+1))
for(i in 1:n) {
repeat {
v <- runif(d+1,-1,1)
norm.squared <- sum(v*v)
if (norm.squared > 0 & norm.squared <= 1) break
}
u.sample[i,] <- v/sqrt(norm.squared)
}
u.sample
}
rsphere
rsphere(3,4)
u <- rsphere(3,4)
u
u*u
rowSums(u*u)
u <- rsphere(1000,3)
u
rowSums(u*u)
u <- rsphere(10000,3)
u <- rsphere(100000,3)
u <- rsphere(1000000,3)
v <- matrix(runif(3000000,-1,1),ncol = 3)
n2 <- rowSums(v*v)
nn <- sqrt(n2)
aa <- matrix (1:10, ncol=2)
aa
aa[c(3,4),]
aa[c(T,T,F,F,T),]
aa[c(T,T,F,F,F),]
aa[c(F,F,F,F,F),]
bb <- aa[c(F,F,F,F,F),]
dim(aa)
dim(bb)
rbind(bb,aa)
rsphere.slow <- function(n, d) {
u.sample <- matrix(nrow=n,ncol=(d+1))
for(i in 1:n) {
repeat {
v <- runif(d+1,-1,1)
norm.squared <- sum(v*v)
if (norm.squared > 0 & norm.squared <= 1) break
}
u.sample[i,] <- v/sqrt(norm.squared)
}
u.sample
}
rsphere.faster <- function(n, d) {
u.sample <- matrix(nrow = 0, ncol = d+1)
while(dim(u.sample)[1] < n) {
m <- n - dim(u.sample)[1]
v <- matrix(runif(m*(d+1),-1,1), nrow = m)
norm.squared <- rowSums(v*v)
keep <- norm.squared > 0 & norm.squared <= 1
rbind(u.sample, v[keep,] / sqrt(norm.squared[keep]))
}
u.sample
}
rsphere.slow(10,2)
rsphere.faster(10,2)
n <- 10
d <- 2
u.sample <- matrix(nrow=0,ncol=d+1)
u.sample <- matrix(0,nrow=0,ncol=d+1)
dim(u.sample)
dim(u.sample)[1]
m <- n - dim(u.sample)[1]
v <- matrix(runif(m*(d+1),-1,1),nrow=m)
v
norm.squared <- rowSums(v*v)
norm.squared
keep <- norm.squared > 0 & norm.squared <= 1
keep
v[keep,]
v[keep,]/sqrt(norm.squared[keep])
rsphere.faster <- function(n, d) {
u.sample <- matrix(0,nrow = 0, ncol = d+1)
while(dim(u.sample)[1] < n) {
m <- n - dim(u.sample)[1]
v <- matrix(runif(m*(d+1),-1,1), nrow = m)
norm.squared <- rowSums(v*v)
keep <- norm.squared > 0 & norm.squared <= 1
u.sample <- rbind(u.sample, v[keep,] / sqrt(norm.squared[keep]))
}
u.sample
}
rsphere.faster(10,2)
rsphere.faster(10,2)
rsphere.faster(1000000,2)
x <- rsphere.faster(1000000,2)
y <- rsphere.slow(1000000,2)
hist(x[1,])
head(x)
?hist
hist(x=x[,1])
hist(x=y[,1])
rsphere <- function(num.samples, n) {
u.sample <- matrix(0,nrow = 0, ncol = n+1)
while(dim(u.sample)[1] < num.samples) {
m <- num.samples - dim(u.sample)[1]
v <- matrix(rnorm(m*(n+1)), nrow = m)
norm.squared <- rowSums(v*v)
keep <- norm.squared > 0
u.sample <- rbind(u.sample, v[keep,] / sqrt(norm.squared[keep]))
}
u.sample
}
rsphere(10,3)
rsphere.faster(10,100)
rsphere(10,100)
u <- rsphere(10,100)
head(u)
